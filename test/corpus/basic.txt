===
Atomic Fact
===
fact.
---

(source_file
  (read_term
    (atom
      (unquoted_atom))
    (read_term_end_token)))

===
Atomic Directive
===
:-atom.
---

(source_file
  (read_term
    (prefix_operator_term
      (non_comma_operator)
      (atom
        (unquoted_atom)))
    (read_term_end_token)))

===
Atom with Underscore
===
my_fact.
---

(source_file
  (read_term
    (atom
      (unquoted_atom))
    (read_term_end_token)))

===
Directive with space
===
:- thing.
---

(source_file
  (read_term
    (prefix_operator_term
      (non_comma_operator)
      (atom
        (unquoted_atom)))
    (read_term_end_token)))

===
Quoted atom
===
'asdf'.
---

(source_file
  (read_term
    (atom
      (quoted_atom
        (single_quoted_content)))
    (read_term_end_token)))

===
Quoted format string
===
'asdf~nasdf'.
---

(source_file
  (read_term
    (atom
      (quoted_atom
        (single_quoted_content)
        (format_string_placeholder)
        (single_quoted_content)))
    (read_term_end_token)))

===
Quoted atom with character escape
===
'asdf\nasdf'.
---

(source_file
  (read_term
    (atom
      (quoted_atom
        (single_quoted_content)
        (single_quoted_character_escape)
        (single_quoted_content)))
    (read_term_end_token)))

===
Quoted atom with character escape and format string placeholder
===
:- 'qwerty\npoiu~~lkjhg'.
---

(source_file
  (read_term
    (prefix_operator_term
      (non_comma_operator)
      (atom
        (quoted_atom
          (single_quoted_content)
          (single_quoted_character_escape)
          (single_quoted_content)
          (format_string_placeholder)
          (single_quoted_content))))
    (read_term_end_token)))

===
Double quoted string
===
"asdf".
---

(source_file
  (read_term
    (string
      (double_quoted_string
        (double_quoted_content)))
    (read_term_end_token)))

===
Double quoted string with character escape
===
"as\ndf".
---

(source_file
  (read_term
    (string
      (double_quoted_string
        (double_quoted_content)
        (double_quoted_character_escape)
        (double_quoted_content)))
    (read_term_end_token)))

===
Double quoted string with escaped double quote
===
"as\"df".
---

(source_file
  (read_term
    (string
      (double_quoted_string
        (double_quoted_content)
        (double_quoted_character_escape)
        (double_quoted_content)))
    (read_term_end_token)))

===
Simple compound term
===
compound(term).
---

(source_file
  (read_term
    (compound_term
      (atom
        (unquoted_atom))
      (atom
        (unquoted_atom)))
    (read_term_end_token)))

===
Quoted functor compound term
===
'this is a functor'(blah).
---

(source_file
  (read_term
    (compound_term
      (atom
        (quoted_atom
          (single_quoted_content)))
      (atom
        (unquoted_atom)))
    (read_term_end_token)))

===
Variable - single letter
===
anything(X).
---

(source_file
  (read_term
    (compound_term
      (atom
        (unquoted_atom))
      (variable))
    (read_term_end_token)))

===
Variable - underscore
===
anything(_).
---

(source_file
  (read_term
    (compound_term
      (atom
        (unquoted_atom))
      (variable))
    (read_term_end_token)))

===
Variable - multi-letter
===
anything(Asdf).
---

(source_file
  (read_term
    (compound_term
      (atom
        (unquoted_atom))
      (variable))
    (read_term_end_token)))

===
Variable - all kinds of characters
===
anything(QWerty43_51X).
---

(source_file
  (read_term
    (compound_term
      (atom
        (unquoted_atom))
      (variable))
    (read_term_end_token)))

===
Multiple arguments in compound term
===
append(A, B, C).
---

(source_file
  (read_term
    (compound_term
      (atom
        (unquoted_atom))
      (variable)
      (variable)
      (variable))
    (read_term_end_token)))

===
List - empty
===
[].
---

(source_file
  (read_term
    (list_literal)
    (read_term_end_token)))

===
List - one item
===
[a].
---

(source_file
  (read_term
    (list_literal
      (atom
        (unquoted_atom)))
    (read_term_end_token)))

===
List - two items
===
[a, b].
---

(source_file
  (read_term
    (list_literal
      (atom
        (unquoted_atom))
      (atom
        (unquoted_atom)))
    (read_term_end_token)))

===
List - simple cons
===
[a | b].
---

(source_file
  (read_term
    (list_literal
      (atom
        (unquoted_atom))
      (atom
        (unquoted_atom)))
    (read_term_end_token)))

===
List - multi-item and cons
===
[a, b, c | tail].
---

(source_file
  (read_term
    (list_literal
      (atom
        (unquoted_atom))
      (atom
        (unquoted_atom))
      (atom
        (unquoted_atom))
      (atom
        (unquoted_atom)))
    (read_term_end_token)))

===
Number - decimal (no sign)
===
1234.
---

(source_file
  (read_term
    (integer)
    (read_term_end_token)))

===
Number - decimal zero
===
0.
---

(source_file
  (read_term
    (integer)
    (read_term_end_token)))

===
Number - signed zero
===
pair(-0, +0).
---

(source_file
  (read_term
    (compound_term
      (atom
        (unquoted_atom))
      (integer)
      (integer))
    (read_term_end_token)))

===
Number - decimal (signed)
===
pair(-345, +632).
---

(source_file
  (read_term
    (compound_term
      (atom
        (unquoted_atom))
      (integer)
      (integer))
    (read_term_end_token)))

===
Number - binary
===
0b00101011.
---

(source_file
  (read_term
    (integer)
    (read_term_end_token)))

===
Number - octal
===
0o3427.
---

(source_file
  (read_term
    (integer)
    (read_term_end_token)))

===
Number - hexadecimal
===
0x2a1f3e5.
---

(source_file
  (read_term
    (integer)
    (read_term_end_token)))

===
Operator term - simple
===
a + b.
---

(source_file
  (read_term
    (binop_term
      (atom
        (unquoted_atom))
      (operator
        (non_comma_operator))
      (atom
        (unquoted_atom)))
    (read_term_end_token)))

===
Operator term - two operators
===
a + b * c.
---

(source_file
  (read_term
    (binop_term
      (atom
        (unquoted_atom))
      (operator
        (non_comma_operator))
      (binop_term
        (atom
          (unquoted_atom))
        (operator
          (non_comma_operator))
        (atom
          (unquoted_atom))))
    (read_term_end_token)))

===
Operator term - multiple of same
===
a + b + b + c.
---

(source_file
  (read_term
    (binop_term
      (atom
        (unquoted_atom))
      (operator
        (non_comma_operator))
      (binop_term
        (atom
          (unquoted_atom))
        (operator
          (non_comma_operator))
        (binop_term
          (atom
            (unquoted_atom))
          (operator
            (non_comma_operator))
          (atom
            (unquoted_atom)))))
    (read_term_end_token)))

===
Operator term - multi-character operator
===
a +--+ b.
---

(source_file
  (read_term
    (binop_term
      (atom
        (unquoted_atom))
      (operator
        (non_comma_operator))
      (atom
        (unquoted_atom)))
    (read_term_end_token)))

===
Operator term - operator in compound term
===
thing(A + B, 1 - 2).
---

(source_file
  (read_term
    (compound_term
      (atom
        (unquoted_atom))
      (binop_term
        (variable)
        (operator
          (non_comma_operator))
        (binop_term
          (variable)
          (operator)
          (binop_term
            (integer)
            (operator
              (non_comma_operator))
            (integer)))))
    (read_term_end_token)))

===
Operator term - operator in list
===
[A + B, 1 - 2].
---

(source_file
  (read_term
    (list_literal
      (binop_term
        (variable)
        (operator
          (non_comma_operator))
        (binop_term
          (variable)
          (operator)
          (binop_term
            (integer)
            (operator
              (non_comma_operator))
            (integer)))))
    (read_term_end_token)))

===
Append
===
append([], Ys, Ys).
append([X|Xs], Ys, [X|XsYs]) :-
    append(Xs, Ys, XsYs).
---

(source_file
  (read_term
    (compound_term
      (atom
        (unquoted_atom))
      (list_literal)
      (variable)
      (variable))
    (read_term_end_token))
  (read_term
    (binop_term
      (compound_term
        (atom
          (unquoted_atom))
        (list_literal
          (variable)
          (variable))
        (variable)
        (list_literal
          (variable)
          (variable)))
      (operator
        (non_comma_operator))
      (compound_term
        (atom
          (unquoted_atom))
        (variable)
        (variable)
        (variable)))
    (read_term_end_token)))

===
Parenthesized
===
blah( (x) ).
---

(source_file
  (read_term
    (compound_term
      (atom
        (unquoted_atom))
      (parenthesized_term
        (atom
          (unquoted_atom))))
    (read_term_end_token)))

===
Curly Braced Term
===
{ 1, 2, 3 }.
---

(source_file
  (read_term
    (curly_braced_term
      (binop_term
        (integer)
        (operator)
        (binop_term
          (integer)
          (operator)
          (integer))))
    (read_term_end_token)))

===
Rational Numbers - simple
===
(1r1).
---

(source_file
  (read_term
    (parenthesized_term
      (rational))
    (read_term_end_token)))

===
Rational Numbers - multi-digit
===
(123r123).
---

(source_file
  (read_term
    (parenthesized_term
      (rational))
    (read_term_end_token)))

===
Rational Numbers - negative
===
(-11r9).
---

(source_file
  (read_term
    (parenthesized_term
      (rational))
    (read_term_end_token)))

