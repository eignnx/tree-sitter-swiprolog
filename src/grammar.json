{
  "$schema": "https://tree-sitter.github.io/tree-sitter/assets/schemas/grammar.schema.json",
  "name": "swiprolog",
  "rules": {
    "source_file": {
      "type": "REPEAT",
      "content": {
        "type": "CHOICE",
        "members": [
          {
            "type": "SYMBOL",
            "name": "directive"
          },
          {
            "type": "SYMBOL",
            "name": "clause"
          }
        ]
      }
    },
    "directive": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": ":-"
        },
        {
          "type": "SYMBOL",
          "name": "_term"
        },
        {
          "type": "STRING",
          "value": "."
        }
      ]
    },
    "clause": {
      "type": "SEQ",
      "members": [
        {
          "type": "SYMBOL",
          "name": "_term"
        },
        {
          "type": "CHOICE",
          "members": [
            {
              "type": "SEQ",
              "members": [
                {
                  "type": "STRING",
                  "value": ":-"
                },
                {
                  "type": "SYMBOL",
                  "name": "_term"
                }
              ]
            },
            {
              "type": "BLANK"
            }
          ]
        },
        {
          "type": "STRING",
          "value": "."
        }
      ]
    },
    "_term": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "_restricted_operators_term"
        }
      ]
    },
    "_restricted_operators_term": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "compound_term"
        },
        {
          "type": "SYMBOL",
          "name": "atom"
        },
        {
          "type": "SYMBOL",
          "name": "string"
        },
        {
          "type": "SYMBOL",
          "name": "variable"
        },
        {
          "type": "SYMBOL",
          "name": "list_literal"
        }
      ]
    },
    "compound_term": {
      "type": "SEQ",
      "members": [
        {
          "type": "FIELD",
          "name": "functor",
          "content": {
            "type": "SYMBOL",
            "name": "atom"
          }
        },
        {
          "type": "STRING",
          "value": "("
        },
        {
          "type": "SYMBOL",
          "name": "_restricted_operators_term"
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "SEQ",
            "members": [
              {
                "type": "STRING",
                "value": ","
              },
              {
                "type": "SYMBOL",
                "name": "_restricted_operators_term"
              }
            ]
          }
        },
        {
          "type": "STRING",
          "value": ")"
        }
      ]
    },
    "atom": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "unquoted_atom"
        },
        {
          "type": "SYMBOL",
          "name": "quoted_atom"
        }
      ]
    },
    "unquoted_atom": {
      "type": "PATTERN",
      "value": "[a-z][a-zA-Z_]*"
    },
    "quoted_atom": {
      "type": "SEQ",
      "members": [
        {
          "type": "PATTERN",
          "value": "'"
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "SYMBOL",
            "name": "_single_quoted_inner"
          }
        },
        {
          "type": "PATTERN",
          "value": "'"
        }
      ]
    },
    "_single_quoted_inner": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "single_quoted_character_escape"
        },
        {
          "type": "SYMBOL",
          "name": "format_string_placeholder"
        },
        {
          "type": "SYMBOL",
          "name": "single_quoted_content"
        }
      ]
    },
    "format_string_placeholder": {
      "type": "PATTERN",
      "value": "~[~nt]"
    },
    "single_quoted_character_escape": {
      "type": "PATTERN",
      "value": "\\\\[nrtv\\\\']"
    },
    "single_quoted_content": {
      "type": "PATTERN",
      "value": "[^\\\\~']+"
    },
    "string": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "double_quoted_string"
        },
        {
          "type": "SYMBOL",
          "name": "backtick_string"
        }
      ]
    },
    "double_quoted_string": {
      "type": "SEQ",
      "members": [
        {
          "type": "PATTERN",
          "value": "\""
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "SYMBOL",
            "name": "_double_quoted_string_inner"
          }
        },
        {
          "type": "PATTERN",
          "value": "\""
        }
      ]
    },
    "_double_quoted_string_inner": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "format_string_placeholder"
        },
        {
          "type": "SYMBOL",
          "name": "double_quoted_character_escape"
        },
        {
          "type": "SYMBOL",
          "name": "double_quoted_content"
        }
      ]
    },
    "double_quoted_character_escape": {
      "type": "PATTERN",
      "value": "\\\\[nrtv\\\\\"]"
    },
    "double_quoted_content": {
      "type": "PATTERN",
      "value": "[^\\\\~\"]+"
    },
    "backtick_string": {
      "type": "SEQ",
      "members": [
        {
          "type": "PATTERN",
          "value": "`"
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "SYMBOL",
            "name": "_backtick_string_inner"
          }
        },
        {
          "type": "PATTERN",
          "value": "`"
        }
      ]
    },
    "_backtick_string_inner": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "format_string_placeholder"
        },
        {
          "type": "SYMBOL",
          "name": "backticked_character_escape"
        },
        {
          "type": "SYMBOL",
          "name": "backticked_content"
        }
      ]
    },
    "backticked_character_escape": {
      "type": "PATTERN",
      "value": "\\\\[nrtv\\\\`]"
    },
    "backticked_content": {
      "type": "PATTERN",
      "value": "[^\\\\~`]+"
    },
    "variable": {
      "type": "PATTERN",
      "value": "[_A-Z][a-zA-Z0-9_]*"
    },
    "list_literal": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SEQ",
          "members": [
            {
              "type": "STRING",
              "value": "["
            },
            {
              "type": "STRING",
              "value": "]"
            }
          ]
        },
        {
          "type": "SEQ",
          "members": [
            {
              "type": "STRING",
              "value": "["
            },
            {
              "type": "SYMBOL",
              "name": "_restricted_operators_term"
            },
            {
              "type": "REPEAT",
              "content": {
                "type": "SEQ",
                "members": [
                  {
                    "type": "STRING",
                    "value": ","
                  },
                  {
                    "type": "SYMBOL",
                    "name": "_restricted_operators_term"
                  }
                ]
              }
            },
            {
              "type": "CHOICE",
              "members": [
                {
                  "type": "SEQ",
                  "members": [
                    {
                      "type": "STRING",
                      "value": "|"
                    },
                    {
                      "type": "SYMBOL",
                      "name": "_term"
                    }
                  ]
                },
                {
                  "type": "BLANK"
                }
              ]
            },
            {
              "type": "STRING",
              "value": "]"
            }
          ]
        }
      ]
    }
  },
  "extras": [
    {
      "type": "PATTERN",
      "value": "\\s"
    }
  ],
  "conflicts": [],
  "precedences": [],
  "externals": [],
  "inline": [],
  "supertypes": [],
  "reserved": {}
}